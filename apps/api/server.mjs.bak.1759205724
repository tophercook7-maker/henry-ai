import express from 'express';
import cors from 'cors';
import fs from 'node:fs';
import path from 'node:path';
import browseRouter from './routes/browse.mjs';

import chatRouter from './routes/chat.mjs';

const app = express();
app.use(cors());
app.use(express.json({ limit: '25mb' }));
app.use(express.urlencoded({ extended: true, limit: '25mb' }));

app.get('/health', (_req,res)=>res.json({ ok:true, service:'henry-api', ts: Date.now() }));
app.get('/ping',   (_req,res)=>res.json({ ok:true }));

// uploads (placeholder; can wire a real upload route later)
const UPLOAD_DIR = path.resolve('./uploads');
fs.mkdirSync(UPLOAD_DIR, { recursive: true });
app.use('/uploads', express.static(UPLOAD_DIR));

app.use('/', browseRouter);
app.use('/', chatRouter);

const PORT = Number(process.env.PORT || 3000);
app.listen(PORT, '127.0.0.1', () => {
  console.log(`Henry API listening on http://127.0.0.1:${PORT}`);
});

// --- lightweight key verifier for the web UI ---
app.get('/key-verify', (req, res) => {
  // Always OK locally; the browser can store whatever key it wants.
  // (Your server will still use its own key/env when calling OpenAI.)
  res.json({
    ok: true,
    ts: Date.now(),
    model: process.env.DEFAULT_MODEL || 'gpt-4o-mini'
  });
});

// --- Henry Memory (SQLite) ---
import Database from 'better-sqlite3';
const db = new Database('./data/henry.db');
db.prepare(`
  CREATE TABLE IF NOT EXISTS memory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    role TEXT,
    content TEXT,
    ts INTEGER DEFAULT (strftime('%s','now'))
  )
`).run();

// Save last 50 messages
function saveMessage(role, content) {
  db.prepare("INSERT INTO memory (role,content) VALUES (?,?)").run(role, content);
  const cnt = db.prepare("SELECT COUNT(*) as c FROM memory").get().c;
  if (cnt > 100) {
    db.prepare("DELETE FROM memory WHERE id IN (SELECT id FROM memory ORDER BY id ASC LIMIT ?)").run(cnt-100);
  }
}

// Load memory
function loadMemory() {
  return db.prepare("SELECT role,content FROM memory ORDER BY id DESC LIMIT 50").all().reverse();
}

// Hook into /chat
const origChat = app._router.stack.find(r => r.route && r.route.path === '/chat').route.stack[0].handle;
app._router.stack.find(r => r.route && r.route.path === '/chat').route.stack[0].handle = async (req,res)=>{
  const incoming = req.body.messages || [];
  for (const m of incoming) saveMessage(m.role, m.content);
  const history = loadMemory();
  req.body.messages = history;
  return origChat(req,res);
};

console.log("ðŸ§  Henry memory enabled");
