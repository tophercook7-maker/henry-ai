import { fetch as undiciFetch } from "undici";
if (typeof fetch === "undefined") { globalThis.fetch = undiciFetch; }

import express from 'express';
import cors from 'cors';
import path from 'node:path';
import fs from 'node:fs';
import os from 'node:os';
import { exec as _exec } from 'node:child_process';

import filesRoutes from './routes/files.mjs';
import pdfExtractRoutes from './routes/pdf-extract.mjs';
import chatRoutes from './routes/chat.mjs';

// Load OPENAI_API_KEY from ~/.henry/secret.env if not set
try {
  if (!process.env.OPENAI_API_KEY) {
    const p = `${os.homedir()}/.henry/secret.env`;
    if (fs.existsSync(p)) {
      const t = fs.readFileSync(p,'utf8');
      const m = t.match(/OPENAI_API_KEY\s*=\s*(.+)\s*$/m);
      if (m) process.env.OPENAI_API_KEY = m[1].trim();
    }
  }
} catch {}

const app = express();
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(cors());

// --- basic
app.get('/health', (_req,res)=>res.json({ ok:true, ts: Date.now() }));
app.get('/open-terminal', (_req, res) => {
  _exec('open -a Terminal', (err) => err ? res.status(500).send('Failed to open Terminal') : res.send('Terminal opened'));
});

// --- key status + verify (debug helpers)
app.get('/key-status',(req,res)=>{
  const hdr=req.get('x-api-key')||'';
  const env=process.env.OPENAI_API_KEY||'';
  const src= hdr ? 'header' : (env ? 'env' : 'none');
  const key= hdr || env || '';
  res.json({ ok:true, source:src, masked: key?`sk-****${key.slice(-4)}`:'' });
});
app.get('/key-verify', async (req,res)=>{
  try{
    const k=req.get('x-api-key')||process.env.OPENAI_API_KEY||'';
    if(!k) return res.status(400).json({ok:false, reason:'no key'});
    const r=await fetch('https://api.openai.com/v1/models',{ headers:{ Authorization:`Bearer ${k}` }});
    const j=await r.json().catch(()=>({}));
    res.status(r.status).json({ ok:r.ok, status:r.status, reason:j?.error?.message||r.statusText||'unknown', code:j?.error?.code||null });
  }catch(e){ res.status(500).json({ ok:false, reason:String(e?.message||e) }); }
});

// --- lightweight text preview
app.get('/files/text/:name', (req, res) => {
  try{
    const uploadDir = path.join(process.env.HOME || process.cwd(), 'henry', 'data', 'uploads');
    const name = req.params.name;
    const p = path.join(uploadDir, name);
    if (!p.startsWith(uploadDir)) return res.status(400).send('bad path');
    if (!fs.existsSync(p)) return res.status(404).send('not found');
    if (!/\.(txt|md|csv|json|log|ya?ml|xml)$/i.test(name)) return res.status(415).send('unsupported');
    const buf = fs.readFileSync(p);
    const slice = buf.slice(0, 200*1024).toString('utf8');
    res.json({ name, bytes: slice.length, totalBytes: buf.length, content: slice });
  }catch(e){ res.status(500).send(typeof e?.message==='string'?e.message:'server error'); }
});

// --- routers
app.use((req,res,next)=>{ // log which key will be used for chat
  try{
    if(req.path?.startsWith('/chat/')){
      const hdr=req.get('x-api-key')||'';
      const env=process.env.OPENAI_API_KEY||'';
      const src=hdr?'header':(env?'env':'none');
      const last4=(hdr||env||'').slice(-4);
      console.log(`CHAT KEY src=${src} last4=${last4}`);
    }
  }catch{}
  next();
});
app.use(filesRoutes);
app.use(pdfExtractRoutes);
app.use(chatRoutes);

// --- errors
app.use((err, req, res, _next)=>{
  const code = err?.status || 500;
  const msg = (typeof err?.message === 'string' ? err.message : String(err||'server error'));
  console.error('API error:', code, msg);
  res.status(code).json({ error: msg });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>console.log(`henry-api listening on http://127.0.0.1:${PORT}`));
