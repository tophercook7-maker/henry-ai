import { fetch as undiciFetch } from "undici";
if (typeof fetch === "undefined") { globalThis.fetch = undiciFetch; }

import express from 'express';
import cors from 'cors';
import path from 'node:path';
import fs from 'node:fs';
import os from 'node:os';

import filesRoutes from './routes/files.mjs';
import chatRoutes from './routes/chat.mjs';

function loadEnvKey() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      const p = `${os.homedir()}/.henry/secret.env`;
      if (fs.existsSync(p)) {
        const t = fs.readFileSync(p,'utf8');
        const m = t.match(/OPENAI_API_KEY\s*=\s*(.+)\s*$/m);
        if (m) process.env.OPENAI_API_KEY = m[1].trim();
      }
    }
  } catch {}
}
loadEnvKey();

const app = express();
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(cors());

app.get('/health', (_req,res)=>res.json({ ok:true, ts: Date.now() }));
app.get('/key-status',(req,res)=>{
  const hdr=req.get('X-API-Key')||'';
  const env=process.env.OPENAI_API_KEY||'';
  const src= hdr ? 'header' : (env ? 'env' : 'none');
  const key= hdr || env || '';
  res.json({ ok:true, source:src, masked: key?`sk-****${key.slice(-4)}`:'' });
});
app.get('/key-verify', async (req,res)=>{
  try{
    const k=req.get('X-API-Key')||process.env.OPENAI_API_KEY||'';
    const proj=req.get('X-OpenAI-Project')||process.env.OPENAI_PROJECT||'';
    const org =req.get('X-OpenAI-Organization')||process.env.OPENAI_ORG||'';
    if(!k) return res.status(400).json({ok:false, reason:'no key'});
    const headers={ Authorization:`Bearer ${k}` };
    if (proj) headers['OpenAI-Project']=proj;
    if (org)  headers['OpenAI-Organization']=org;
    const r=await fetch('https://api.openai.com/v1/models',{ headers });
    const j=await r.json().catch(()=>({}));
    res.status(r.status).json({ ok:r.ok, status:r.status, reason:j?.error?.message||r.statusText||'ok', code:j?.error?.code||null });
  }catch(e){ res.status(500).json({ ok:false, reason:String(e?.message||e) }); }
});

app.use(filesRoutes);
app.use(chatRoutes);

app.use((err, _req, res, _next)=>{
  const code = err?.status || 500;
  const msg = (typeof err?.message === 'string' ? err.message : String(err||'server error'));
  console.error('API error:', code, msg);
  res.status(code).json({ error: msg });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>console.log(`henry-api listening on http://127.0.0.1:${PORT}`));
