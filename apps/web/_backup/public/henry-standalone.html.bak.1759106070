<!doctype html>
<html lang="en">
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Henry ‚Äî Standalone</title>
<style>
  :root { color-scheme: dark; }
  * { box-sizing: border-box; }
  body { margin:0; font:14px/1.45 system-ui, -apple-system, Segoe UI, Roboto, sans-serif; background:#0b0d12; color:#e7ebf3; display:flex; min-height:100vh; }
  /* Sidebar */
  #side { width: 240px; min-width: 220px; background:#0e1117; border-right:1px solid #222a35; display:flex; flex-direction:column; gap:10px; padding:12px; position:sticky; top:0; height:100vh; }
  #brand { font-weight:600; font-size:15px; display:flex; align-items:center; gap:8px; }
  #brand .dot { width:9px; height:9px; border-radius:50%; background:#3ddc84; display:inline-block; }
  .small { font-size:11px; color:#9fb3ff; border:1px solid #2b3342; border-radius:999px; padding:2px 8px; }
  .section-title { margin-top:6px; font-size:11px; color:#9aa6b2; }
  .nav { display:flex; flex-direction:column; gap:6px; }
  .nav button { text-align:left; background:#151a21; border:1px solid #252c38; color:#e7ebf3; padding:6px 8px; border-radius:10px; cursor:pointer; font-size:12px; }
  .nav button.active { background:#1d2430; border-color:#2b3342; }
  .row { display:flex; gap:8px; }
  .row button { flex:1; }
  .pill { font-size:11px; padding:3px 8px; border-radius:999px; border:1px solid #2b3342; color:#9fb3ff; }
  .muted { color:#9aa6b2; font-size:12px; }

  /* Main */
  #main { flex:1; display:flex; flex-direction:column; min-width:0; }
  header { padding:10px 14px; border-bottom:1px solid #222a35; display:flex; gap:8px; align-items:center; justify-content:space-between; }
  #tabbar { display:flex; gap:6px; }
  #tabbar button { background:#1f2633; color:#e7ebf3; border:1px solid #2b3342; border-radius:10px; padding:6px 10px; font-size:12px; cursor:pointer; }
  #views { position:relative; flex:1; display:grid; }
  .view { display:none; padding:14px; overflow:auto; }
  .view.active { display:block; }

  /* Chat */
  #chat { padding-bottom:110px; max-width:900px; margin:0 auto; }
  .msg { margin:8px 0; padding:9px 11px; border-radius:14px; max-width: 80ch; white-space:pre-wrap; word-wrap:break-word; }
  .user { background:#173b7a; color:#e7f0ff; margin-left:auto; }
  .bot  { background:#0f1115; border:1px solid #2a2f3a; color:#e7ebf3; }
  #bar { position:fixed; left:240px; right:0; bottom:0; display:flex; gap:8px; align-items:center; padding:10px 12px; background:rgba(20,20,22,.96); border-top:1px solid #333; backdrop-filter: blur(6px); }
  #input { flex:1; min-height:42px; max-height:150px; resize:vertical; border:1px solid #2a2f3a; border-radius:10px; background:#0f1115; color:#e7ebf3; padding:9px 11px; }
  button, label.btn { padding:8px 10px; background:#1f2633; color:#e7ebf3; border:1px solid #2b3342; border-radius:10px; cursor:pointer; font-size:12px; }
  label.btn input[type=file]{ display:none; }

  /* Toast */
  #toast { position:fixed; right:12px; bottom:84px; max-width:60ch; display:none; padding:9px 11px; border:1px solid #333; border-radius:10px; background:rgba(20,20,22,.96); z-index:9999; }

  @media (max-width: 900px){
    #side{position:fixed;left:0;top:0;transform:translateX(-100%);transition:transform .2s ease; z-index:10000;}
    #side.open{transform:translateX(0)}
    #bar{left:0}
  }

  /* Settings form */
  .kv { display:grid; grid-template-columns: 130px 1fr auto; gap:8px; align-items:center; margin:8px 0; }
  .kv input, .kv select { background:#0f1115; border:1px solid #2a2f3a; color:#e7ebf3; padding:8px 10px; border-radius:8px; }
</style>
<body>
  <aside id="side">
    <div id="brand"><span class="dot"></span> Henry <span id="status" class="small">api: ‚Ä¶</span></div>
    <div class="section-title">Workspace</div>
    <div class="nav">
      <button data-tab="chat" class="active">üí¨ Chat</button>
      <button data-tab="history">üïò History</button>
      <button data-tab="settings">‚öôÔ∏è Settings</button>
      <button data-tab="connect">üîó Connect</button>
    </div>
    <div class="section-title">Quick</div>
    <div class="nav">
      <div class="row">
        <button id="new-chat">New</button>
        <button id="copy-chat">Copy</button>
      </div>
      <div class="row">
        <button id="clear-chat">Clear</button>
        <button id="toggle-side">Hide</button>
      </div>
    </div>
    <div class="section-title">Model</div>
    <div><span id="model" class="pill">checking‚Ä¶</span></div>
  </aside>

  <div id="main">
    <header>
      <div><strong>Henry ‚Äî Sidebar</strong></div>
      <div id="tabbar">
        <button data-tab="chat" class="active">Chat</button>
        <button data-tab="history">History</button>
        <button data-tab="settings">Settings</button>
        <button data-tab="connect">Connect</button>
      </div>
    </header>

    <div id="views">
      <section id="view-chat" class="view active">
        <main id="chat" aria-live="polite"></main>
      </section>

      <section id="view-history" class="view">
        <h3>Conversations</h3>
        <p class="muted">Saved locally on this device. Select to load.</p>
        <ul id="history-list"></ul>
      </section>

      <section id="view-settings" class="view">
        <h3>Settings</h3>
        <div class="muted">Pick model, toggle voice, set API base, run health checks.</div>

        <div class="kv">
          <label for="pref-model">Model</label>
          <select id="pref-model"></select>
          <button id="test-chat">Test</button>
        </div>

        <div class="kv">
          <label for="voice-toggle">Voice</label>
          <select id="voice-toggle">
            <option value="off">Off</option>
            <option value="on">On (system)</option>
          </select>
          <button id="say-hi">Say hi</button>
        </div>

        <div class="kv">
          <label for="api-base">API Base</label>
          <input id="api-base" placeholder="http://127.0.0.1:3000"/>
          <button id="save-api">Save</button>
        </div>

        <div class="row" style="gap:8px;margin-top:8px;">
          <button id="key-status">Key status</button>
          <button id="reload-ui">Reload UI</button>
          <button id="save-thread">Save chat</button>
        </div>

        <pre id="settings-log" style="margin-top:12px; background:#0f1115; border:1px solid #2a2f3a; padding:10px; border-radius:10px; max-height:220px; overflow:auto;"></pre>
      </section>

      <section id="view-connect" class="view">
        <h3>Connect</h3>
        <p class="muted">Launch the relevant account pages. OAuth wiring will come next; these actions are real (no placeholders).</p>

        <div class="row" style="margin-top:8px;">
          <button id="connect-drive">Google Drive</button>
          <button id="connect-slack">Slack</button>
        </div>
        <div class="row" style="margin-top:8px;">
          <button id="connect-gmail">Gmail</button>
          <button id="connect-terminal">Terminal (local)</button>
        </div>

        <pre id="connect-log" style="margin-top:12px; background:#0f1115; border:1px solid #2a2f3a; padding:10px; border-radius:10px; max-height:220px; overflow:auto;"></pre>
      </section>
    </div>
  </div>

  <!-- Composer -->
  <div id="bar">
    <textarea id="input" placeholder="Type to Henry ‚Äî Enter sends; Shift+Enter = newline"></textarea>
    <label class="btn" title="Attach files"><input id="file" type="file" multiple>üìé</label>
    <button id="send">Send</button>
  </div>

  <div id="toast"></div>

<script>
const LS = {
  kAPI:"henry:apiBase", kVoice:"henry:voice", kModel:"henry:model", kThreads:"henry:thread:"
};
let API = localStorage.getItem(LS.kAPI) || (window.HENRY_API_BASE || "http://127.0.0.1:3000");

const $=id=>document.getElementById(id);
const qa=s=>Array.from(document.querySelectorAll(s));
const chat=$("chat"), input=$("input"), send=$("send"), fileI=$("file");
const statusEl=$("status"), modelEl=$("model"), toastEl=$("toast"), settingsLog=$("settings-log");
const historyList=$("history-list"), prefModel=$("pref-model"), voiceToggle=$("voice-toggle"), apiBase=$("api-base");

function toast(msg, err=false){ toastEl.textContent=msg; toastEl.style.display="block"; toastEl.style.borderColor=err?"#a33":"#333"; toastEl.style.color=err?"#ffd6d6":"#e7ebf3"; clearTimeout(toastEl._h); toastEl._h=setTimeout(()=>toastEl.style.display="none",2800); }
function bubble(role,text){ const d=document.createElement("div"); d.className="msg "+(role==="user"?"user":"bot"); d.textContent=text; chat.appendChild(d); d.scrollIntoView({behavior:"smooth",block:"end"}); return d; }

function saveThread(){ const items=qa("#chat .msg").map(x=>({role:x.classList.contains("user")?"user":"bot", text:x.textContent})); const id=Date.now()+""; localStorage.setItem(LS.kThreads+id, JSON.stringify({id, t:new Date().toISOString(), items})); refreshHistory(); return id; }
function refreshHistory(){
  historyList.innerHTML="";
  const keys=Object.keys(localStorage).filter(k=>k.startsWith(LS.kThreads)).sort().reverse();
  for(const k of keys){
    const v=JSON.parse(localStorage.getItem(k)||"{}");
    const li=document.createElement("li");
    const first=(v.items?.find(x=>x.role==="user")?.text||"").slice(0,48);
    li.innerHTML = `<button data-load="${v.id}" style="width:100%;text-align:left;background:#151a21;border:1px solid #252c38;color:#e7ebf3;padding:8px 10px;border-radius:10px;cursor:pointer;">${new Date(v.t).toLocaleString()} ‚Äî ${first}</button>`;
    historyList.appendChild(li);
  }
  qa('[data-load]').forEach(b=>b.onclick=()=>{ const v=JSON.parse(localStorage.getItem(LS.kThreads+b.dataset.load)||"{}"); chat.innerHTML=""; (v.items||[]).forEach(x=>bubble(x.role,x.text)); switchTab("chat"); });
}

function switchTab(name){
  qa(".view").forEach(v=>v.classList.remove("active"));
  qa("[data-tab]").forEach(b=>b.classList.remove("active"));
  document.getElementById("view-"+name).classList.add("active");
  qa('[data-tab="'+name+'"]').forEach(b=>b.classList.add("active"));
}

function fetchWithTimeout(url,opts={},ms=9000){ const c=new AbortController(); const t=setTimeout(()=>c.abort(),ms); return fetch(url,{...opts,signal:c.signal}).finally(()=>clearTimeout(t)); }

let voiceOn = (localStorage.getItem(LS.kVoice) || "off") === "on";
function speak(t){ if(!voiceOn) return; try{ const u=new SpeechSynthesisUtterance(t); speechSynthesis.cancel(); speechSynthesis.speak(u);}catch{} }

async function init(){
  $("toggle-side").onclick=()=>document.getElementById("side").classList.toggle("open");
  $("new-chat").onclick=()=>{ if (chat.children.length) saveThread(); chat.innerHTML=""; switchTab("chat"); };
  $("copy-chat").onclick=async()=>{ const txt=qa("#chat .msg").map(x=> (x.classList.contains("user")?"You: ":"Henry: ")+x.textContent).join("\n"); try{ await navigator.clipboard.writeText(txt); toast("Copied chat"); }catch{} };
  $("clear-chat").onclick=()=>{ chat.innerHTML=""; toast("Cleared"); };

  qa('[data-tab]').forEach(b=> b.onclick=()=>switchTab(b.dataset.tab));

  apiBase.value = API;
  voiceToggle.value = voiceOn ? "on" : "off";

  try{ const r=await fetch(`${API}/ping`); const j=await r.json(); statusEl.textContent = j?.ok?`api: ok pid ${j.pid}`:"api: ?"; } catch{ statusEl.textContent="api: offline"; }
  try{
    const r=await fetch(`${API}/key-verify`); const j=await r.json();
    const models = j?.ok && Array.isArray(j.models) ? j.models : ["gpt-4o-mini"];
    prefModel.innerHTML = "";
    models.slice(0,40).forEach(m=>{ const o=document.createElement("option"); o.value=o.textContent=m; prefModel.appendChild(o); });
    const saved = localStorage.getItem(LS.kModel);
    const pick = saved && models.includes(saved) ? saved : (models.find(m=>/gpt-5|o1|gpt-4o|gpt-4\.1/.test(m)) || models[0]);
    prefModel.value = pick; modelEl.textContent = `model: ${pick}`;
  }catch{ modelEl.textContent="model: gpt-4o-mini"; prefModel.innerHTML='<option>gpt-4o-mini</option>'; }

  $("save-api").onclick = () => {
    const v=(apiBase.value||"").trim();
    if(!/^https?:\/\/.+/.test(v)) return toast("Enter full URL incl. http(s)://", true);
    API = v; localStorage.setItem(LS.kAPI, API);
    toast("Saved API base");
  };

  voiceToggle.onchange = () => {
    voiceOn = voiceToggle.value === "on";
    localStorage.setItem(LS.kVoice, voiceOn ? "on" : "off");
    toast(voiceOn ? "Voice on" : "Voice off");
  };

  prefModel.onchange = () => {
    localStorage.setItem(LS.kModel, prefModel.value);
    modelEl.textContent = `model: ${prefModel.value}`;
    toast(`Model set: ${prefModel.value}`);
  };

  $("say-hi").onclick = () => speak("Howdy, I am Henry.");

  $("key-status").onclick = async () => {
    try{ const r=await fetch(`${API}/key-verify`); const t=await r.text(); settingsLog.textContent=t; toast(r.ok?"Key OK":"Key check failed", !r.ok); }
    catch(e){ settingsLog.textContent=String(e); toast("Key check failed", true); }
  };

  $("reload-ui").onclick = () => location.reload();
  $("save-thread").onclick = () => { saveThread(); toast("Thread saved"); };

  // Connect ‚Äî open real sites in a new tab and log status
  const clog = $("connect-log");
  const logc = s => { clog.textContent = (clog.textContent ? clog.textContent+"\n" : "") + s; };

  $("connect-drive").onclick   = () => { window.open("https://drive.google.com", "_blank"); logc("Drive: opened drive.google.com (sign in, files read-only until OAuth is wired)."); };
  $("connect-slack").onclick   = () => { window.open("https://slack.com/signin", "_blank"); logc("Slack: opened signin page (channel access requires OAuth, coming next)."); };
  $("connect-gmail").onclick   = () => { window.open("https://mail.google.com", "_blank"); logc("Gmail: opened mail.google.com (read/send requires OAuth, coming next)."); };
  $("connect-terminal").onclick= () => { 
    const cmd = "open -a Terminal"; 
    logc("Terminal (local): For security, browsers can't start local apps. Run this in macOS:");
    logc("$ " + cmd);
  };

  if (!chat.children.length) bubble("bot","Howdy ‚Äî Henry‚Äôs here. Use the left tabs. Enter sends; Shift+Enter = newline.");
}

async function sendNow(){
  const raw=input.value; const text=raw.trim(); if(!text){ toast("Type something first"); return; }
  const model = document.getElementById("pref-model").value || (modelEl.textContent.replace("model: ","")||"gpt-4o-mini");

  bubble("user", text);
  send.disabled=true; input.disabled=true;
  const th = bubble("bot","‚Ä¶thinking");
  let fileNotes=""; if(fileI?.files?.length){ fileNotes = "\n\n(Attached: "+[...fileI.files].map(f=>f.name).join(", ")+")"; }

  try{
    const r = await fetchWithTimeout(`${API}/chat`,{
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body: JSON.stringify({
        model,
        messages:[
          { role:"system", content:"You are Henry, a warm helpful assistant." },
          { role:"user", content:text + fileNotes }
        ]
      })
    });
    const ct=r.headers.get("content-type")||""; const isJSON=ct.includes("application/json");
    const data=isJSON? await r.json().catch(()=>null): await r.text();
    th.remove();
    if(!r.ok){ toast(`Chat failed ${r.status}`, true); bubble("bot", (typeof data==="string"?data:(data?.error||data?.reason||"Chat failed"))); return; }
    const reply=(isJSON?(data?.reply||data?.content):data)||"No reply";
    bubble("bot", reply);
    speak(reply);
    input.value=""; if(fileI) fileI.value="";
  }catch(e){
    th.remove(); const msg=(e?.name==="AbortError")? "Timeout (9s)":"Network error"; toast(msg,true); bubble("bot", msg+" talking to API.");
  }finally{
    send.disabled=false; input.disabled=false; input.focus();
  }
}

document.addEventListener("DOMContentLoaded", init);
$("send").onclick = sendNow;
$("input").addEventListener("keydown",(e)=>{ if(e.key==="Enter" && !e.shiftKey){ e.preventDefault(); sendNow(); } });
</script>
</body>
</html>
